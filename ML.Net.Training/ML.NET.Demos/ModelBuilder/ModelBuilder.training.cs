﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace ModelBuilder
{
    public partial class ModelBuilder
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"island", @"island"),new InputOutputColumnPair(@"sex", @"sex")})      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"culmen_length_mm", @"culmen_length_mm"),new InputOutputColumnPair(@"culmen_depth_mm", @"culmen_depth_mm"),new InputOutputColumnPair(@"flipper_length_mm", @"flipper_length_mm"),new InputOutputColumnPair(@"body_mass_g", @"body_mass_g")}))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"island",@"sex",@"culmen_length_mm",@"culmen_depth_mm",@"flipper_length_mm",@"body_mass_g"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(@"species", @"species"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.LbfgsLogisticRegression(l1Regularization:1.06088530066126F,l2Regularization:0.0648997562986137F,labelColumnName:@"species",featureColumnName:@"Features"), labelColumnName: @"species"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

            return pipeline;
        }
    }
}
